1. Поисковые алгоритмы
	•	Линейный поиск
        Поиск элемента путем последовательного перебора всех элементов.
	•	Двоичный поиск
        Эффективный поиск в отсортированном массиве, уменьшающий область поиска вдвое на каждом шаге.
	•	Интерполяционный поиск
        Модификация двоичного поиска, где предполагается равномерное распределение данных.
	•	Экспоненциальный поиск
        Используется для быстрого определения границ для последующего двоичного поиска.

2. Алгоритмы сортировки
	•	Сортировка пузырьком (Bubble Sort)
        Простой алгоритм, сравнивающий соседние элементы и меняющий их местами.
	•	Сортировка выбором (Selection Sort)
        Последовательный выбор минимального (или максимального) элемента и его перестановка.
	•	Сортировка вставками (Insertion Sort)
        Постепенное «вставление» элементов в уже отсортированную часть массива.
	•	Сортировка слиянием (Merge Sort)
        Алгоритм «разделяй и властвуй»: разбивает массив и затем сливает отсортированные части.
	•	Быстрая сортировка (Quick Sort)
        Рекурсивный алгоритм, выбирающий опорный элемент и разделяющий массив на две части.
	•	Пирамидальная сортировка (Heap Sort)
        Использует структуру данных «куча» для сортировки.
	•	Сортировка подсчётом (Counting Sort)
        Подходит для сортировки числовых данных в ограниченном диапазоне.
	•	Радиксная сортировка (Radix Sort)
        Сортировка чисел или строк по разрядам.

3. Рекурсивные алгоритмы и динамическое программирование
	•	Факториал
        Рекурсивное вычисление факториала числа.
	•	Числа Фибоначчи
        Классический пример рекурсии и оптимизации с мемоизацией или динамическим программированием.
	•	Задача о рюкзаке (Knapsack Problem)
        Оптимизационная задача, часто решаемая с помощью динамического программирования.
	•	Наибольшая общая подпоследовательность
        (Longest Common  Subsequence, LCS)
	•	Наибольшая возрастающая подпоследовательность
        (Longest Increasing Subsequence, LIS)
	•	Другие задачи, где применяются подходы «разделяй и властвуй» и запоминание промежуточных результатов (мемоизация).

4. Алгоритмы на графах
	•	Обход в глубину (Depth-first search, DFS)
	•	Обход в ширину (Breadth-first search, BFS)
	•	Алгоритм Дейкстры
        Поиск кратчайшего пути в графе с неотрицательными весами.
	•	Алгоритм Беллмана-Форда
        Поиск кратчайших путей, работающий даже с отрицательными весами.
	•	Алгоритм Флойда-Уоршелла
        Нахождение кратчайших путей между всеми парами вершин.
	•	Алгоритм Прима и Краскала
        Для построения минимального остовного дерева.
	•	Топологическая сортировка
        Упорядочивание вершин ориентированного ациклического графа.
	•	Алгоритмы поиска сильных компонент связности (например, Тарьяна или Косараджу)
	•	Алгоритм A*
        Информированный поиск кратчайшего пути.

5. Жадные алгоритмы (Greedy Algorithms)
	•	Жадный алгоритм размена монет
	•	Жадное решение задачи о рюкзаке (в некоторых случаях)
	•	Другие задачи, где выбор на каждом шаге ведет к оптимальному решению.

6. Метод «Разделяй и властвуй» (Divide and Conquer)
	•	Примеры: Быстрая сортировка, сортировка слиянием, алгоритм поиска медианы и другие задачи, решаемые рекурсивным разбиением задачи на подзадачи.

7. Backtracking (Поиск с возвратом)
	•	Задача о N ферзях
	•	Решение судоку
	•	Поиск пути в лабиринте
	•	Другие задачи, где перебор возможных вариантов ведется с возвратом при провале текущего пути.